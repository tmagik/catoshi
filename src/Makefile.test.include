# Copyright (c) 2013-2016 The Bitcoin Core developers
# where * = (Lite, PP, Peerunity, Blu, Cat, Solar, URO, ...)
# Previously distributed under the MIT/X11 software license, see the
# file COPYING or http://www.opensource.org/licenses/mit-license.php.
# This file is part of the Catoshi Codecoin financial cryptography software
# Copyright (c) 2014-2018 7 Elements LLC AGPLv3
# Distributed under the Affero GNU General public license version 3
# file COPYING or http://www.gnu.org/licenses/agpl-3.0.html

EXTRA_DIST += \
	test/bctest.py \
	test/bitcoin-util-test.py \
	test/data/bitcoin-util-test.json \
	test/data/blanktxv1.hex \
	test/data/blanktxv1.json \
	test/data/blanktxv2.hex \
	test/data/blanktxv2.json \
	test/data/tt-delin1-out.hex \
	test/data/tt-delin1-out.json \
	test/data/tt-delout1-out.hex \
	test/data/tt-delout1-out.json \
	test/data/tt-locktime317000-out.hex \
	test/data/tt-locktime317000-out.json \
	test/data/tx394b54bb.hex \
	test/data/txcreate1.hex \
	test/data/txcreate1.json \
	test/data/txcreate2.hex \
	test/data/txcreate2.json \
	test/data/txcreatedata1.hex \
	test/data/txcreatedata1.json \
	test/data/txcreatedata2.hex \
	test/data/txcreatedata2.json \
	test/data/txcreatedata_seq0.hex \
	test/data/txcreatedata_seq0.json \
	test/data/txcreatedata_seq1.hex \
	test/data/txcreatedata_seq1.json \
	test/data/txcreatemultisig1.hex \
	test/data/txcreatemultisig1.json \
	test/data/txcreatemultisig2.hex \
	test/data/txcreatemultisig2.json \
	test/data/txcreatemultisig3.hex \
	test/data/txcreatemultisig3.json \
	test/data/txcreatemultisig4.hex \
	test/data/txcreatemultisig4.json \
	test/data/txcreateoutpubkey1.hex \
	test/data/txcreateoutpubkey1.json \
	test/data/txcreateoutpubkey2.hex \
	test/data/txcreateoutpubkey2.json \
	test/data/txcreateoutpubkey3.hex \
	test/data/txcreateoutpubkey3.json \
	test/data/txcreatescript1.hex \
	test/data/txcreatescript1.json \
	test/data/txcreatescript2.hex \
	test/data/txcreatescript2.json \
	test/data/txcreatescript3.hex \
	test/data/txcreatescript3.json \
	test/data/txcreatescript4.hex \
	test/data/txcreatescript4.json \
	test/data/txcreatesignv1.hex \
	test/data/txcreatesignv1.json \
	test/data/txcreatesignv2.hex

JSON_TEST_FILES += \
  test/data/script_tests.json \
  test/data/sighash.json

JSON_TEST_H_FILES = $(patsubst test/data/%.json,$(OBJDIR)/test/data/%.json.h,$(wildcard $(JSON_TEST_FILES)))

RAW_TEST_FILES = test/data/alertTests.raw

GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)

# NOTE: disabled tests marked with 'Dtests'
# test_$(COIN_BRAND) binary #
TESTS_CPP +=\
  test/arith_uint256_tests.cpp \
  test/scriptnum10.h \
  test/addrman_tests.cpp \
  test/amount_tests.cpp \
  test/allocator_tests.cpp \
  test/base32_tests.cpp \
  test/base58_tests.cpp \
  test/base64_tests.cpp \
  test/bech32_tests.cpp \
  test/bip32_Dtests.cpp \
  test/blockencodings_Dtests.cpp \
  test/bloom_Dtests.cpp \
  test/bswap_tests.cpp \
  test/checkqueue_tests.cpp \
  test/coins_tests.cpp \
  test/compress_tests.cpp \
  test/crypto_tests.cpp \
  test/cuckoocache_tests.cpp \
  test/DoS_Dtests.cpp \
  test/getarg_tests.cpp \
  test/hash_tests.cpp \
  test/key_Dtests.cpp \
  test/limitedmap_tests.cpp \
  test/dbwrapper_tests.cpp \
  test/main_tests.cpp \
  test/mempool_tests.cpp \
  test/merkle_tests.cpp \
  test/merkleblock_tests.cpp \
  test/miner_Dtests.cpp \
  test/multisig_tests.cpp \
  test/net_tests.cpp \
  test/netbase_tests.cpp \
  test/pmt_tests.cpp \
  test/policyestimator_tests.cpp \
  test/pow_Dtests.cpp \
  test/prevector_tests.cpp \
  test/raii_event_tests.cpp \
  test/random_tests.cpp \
  test/reverselock_tests.cpp \
  test/rpc_Dtests.cpp \
  test/sanity_tests.cpp \
  test/scheduler_tests.cpp \
  test/script_P2SH_Dtests.cpp \
  test/script_P2PKH_tests.cpp \
  test/script_tests.cpp \
  test/script_standard_tests.cpp \
  test/scriptnum_tests.cpp \
  test/serialize_tests.cpp \
  test/sighash_Dtests.cpp \
  test/sigopcount_tests.cpp \
  test/skiplist_tests.cpp \
  test/streams_tests.cpp \
  test/test_codecoin.cpp \
  test/test_bitcoin.h \
  test/test_bitcoin_main.cpp \
  test/timedata_tests.cpp \
  test/torcontrol_tests.cpp \
  test/transaction_tests.cpp \
  test/txvalidation_Dtests.cpp \
  test/txvalidationcache_Dtests.cpp \
  test/versionbits_Dtests.cpp \
  test/uint256_tests.cpp \
  test/util_Dtests.cpp

#todo enable this
#if ENABLE_WALLET
#TESTS_CPP += \
#  wallet/test/wallet_test_fixture.cpp \
#  wallet/test/wallet_test_fixture.h \
#  wallet/test/accounting_tests.cpp \
#  wallet/test/wallet_tests.cpp \
#  wallet/test/crypto_tests.cpp
#endif

TESTS := $(patsubst test/%.cpp,%,$(filter %_tests.cpp, $(TESTS_CPP)))
TEST_OBJS := $(patsubst %,$(OBJDIR)/test/%.o,$(TESTS))
TEST_EXTRA_OBJS = $(OBJDIR)/test/test_codecoin.o $(OBJDIR)/test/test_bitcoin_main.o

$(TEST_OBJS): $(JSON_TEST_H_FILES) | $(TESTDIR)

$(TEST_EXTRA_OBJS): | $(TESTDIR)

#yes this has extra cruft for scrypt. ugh.
#filter for init.o is ugly too

fltr_d_objs = $(OBJDIR)/init.o $(OBJDIR)/torcontrol.o 
test_d_objs = $(filter-out $(fltr_d_objs),$(D_OBJS:$(OBJDIR)/%=$(OBJDIR)/%))

$(TESTS): obj/test_$(COIN_BRAND) FORCE
	./obj/test_$(COIN_BRAND) --run_test=$@

test check: $(TESTS)

obj/test_$(COIN_BRAND): $(test_d_objs) $(TEST_EXTRA_OBJS) \
		$(WALLET_OBJS) $(TEST_OBJS) \
		$(OBJDIR)/rpc/client.o $(OBJDIR)/crypto/scrypt.o $(OBJS_SSE2)
	$(V_LINK) $(LINK) $(xCXXFLAGS) -o $@ $(LIBPATHS) $^ $(TESTLIBS) $(xLDFLAGS) $(LIBS) $(D_LIBS) $(BOOST_LIBS)

#CLEAN_BITCOIN_TEST = test/*.gcda test/*.gcno $(GENERATED_TEST_FILES)
#CLEANFILES += $(CLEAN_BITCOIN_TEST)

$(OBJDIR)/%.json.h: %.json
	@$(MKDIR_P) $(@D)
	@{ \
	 echo "namespace json_tests{" && \
	 echo "static unsigned const char $(*F)[] = {" && \
	 $(HEXDUMP) -v -e '8/1 "0x%02x, "' -e '"\n"' $< | $(SED) -e 's/0x  ,//g' && \
	 echo "};};"; \
	} > "$@.new" && mv -f "$@.new" "$@"
	@echo "Generated $@"
